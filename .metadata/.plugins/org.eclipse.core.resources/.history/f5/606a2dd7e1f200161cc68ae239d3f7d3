import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Theleastroundway {
	static int n;
	static int[][] two;
	static int[][] five;
	static int INF = (int) 1e9;
	static long[][] dp2;
	static long[][] dp5;
	static StringBuilder sb;

	static int factorize(int n, int f) {
		int ans = 0;
		while (n % f == 0) {
			ans++;
			n /= f;
		}
		return ans;
	}

	static long dp2(int i, int j) {
		if (i == n - 1 && j == n - 1)
			return dp2[i][j] = two[i][j];

		if (dp2[i][j] != -1)
			return dp2[i][j];

		long right = INF;
		long down = INF;
		if (j < n - 1)
			right = dp2(i, j + 1);
		if (i < n - 1)
			down = dp2(i + 1, j);

		return dp2[i][j] = Math.min(right, down) + two[i][j];
	}

	static long dp5(int i, int j) {
		if (i == n - 1 && j == n - 1)
			return dp5[i][j] = five[i][j];

		if (dp5[i][j] != -1)
			return dp5[i][j];

		long right = INF;
		long down = INF;
		if (j < n - 1)
			right = dp5(i, j + 1);
		if (i < n - 1)
			down = dp5(i + 1, j);

		return dp5[i][j] = Math.min(right, down) + five[i][j];
	}

	static void getPath2(int i, int j) {

		if (i == n - 1 && j == n - 1)
			return;

		if (i < n - 1 && dp2[i][j] == dp2[i + 1][j] + two[i][j]) {
			sb.append("D");
			getPath2(i + 1, j);
			return;
		}
		if (j < n - 1 && dp2[i][j] == dp2[i][j + 1] + two[i][j]) {
			sb.append("R");
			getPath2(i, j + 1);
			return;
		}
	}

	static void getPath5(int i, int j) {

		if (i == n - 1 && j == n - 1)
			return;

		if (i < n - 1 && dp5[i][j] == dp5[i + 1][j] + five[i][j]) {
			sb.append("D");
			getPath5(i + 1, j);
			return;
		}

		if (j < n - 1 && dp5[i][j] == dp5[i][j + 1] + five[i][j]) {
			sb.append("R");
			getPath5(i, j + 1);
			return;
		}

	}

	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		StringTokenizer st;
		n = Integer.parseInt(bf.readLine());
		int[][] matrix = new int[n][n];
		two = new int[n][n];
		five = new int[n][n];
		dp2 = new long[n][n];
		dp5 = new long[n][n];
		for (int i = 0; i < n; i++) {
			Arrays.fill(dp2[i], -1);
			Arrays.fill(dp5[i], -1);
		}
		for (int i = 0; i < n; i++) {
			st = new StringTokenizer(bf.readLine());
			for (int j = 0; j < n; j++) {
				matrix[i][j] = Integer.parseInt(st.nextToken());
				two[i][j] = factorize(matrix[i][j], 2);
				five[i][j] = factorize(matrix[i][j], 5);
			}
		}
        sb = new StringBuilder();
		long ans1 = dp2(0, 0);
		long ans2 = dp5(0, 0);
		if (ans1 <= ans2) {
			out.println(ans1);
			getPath2(0, 0);
		} else {
			out.println(ans2);
			getPath5(0, 0);
		}
        out.println(sb);
		out.flush();
		out.close();
	}
}
