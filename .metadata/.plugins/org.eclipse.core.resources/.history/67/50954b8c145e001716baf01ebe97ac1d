import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;
import java.util.TreeMap;

public class WormWorld {
	static int n;
	static int[][] grid;
	static int[] dy = { 1, 0, -1, 0 };
	static int[] dx = { 0, -1, 0, 1 };
	static PrintWriter out;
	static TreeMap<String, Integer> memo;

	public static boolean valid(int i, int j) {
		return !(i < 0 || i == n || j < 0 || j == n);
	}

	public static int linearize(int i, int j) {
		return i * n + j;
	}

	static boolean exists(String seen, int x) {
		StringTokenizer st = new StringTokenizer(seen);
		while (st.hasMoreTokens()) {
			if (Integer.parseInt(st.nextToken()) == x)
				return true;
		}
		return false;
	}

	public static int dp(int i, int j, String taken, String path) {
		System.out.println(i + " " + j);
		System.out.println(path);
		System.out.println(taken);
		if (memo.containsKey(path)) {
			System.out.println("memoized: " + memo.get(path));
			return memo.get(path);
		}
		int ans = 0;

		for (int k = 0; k < 4; k++) {
			int ny = i + dy[k];
			int nx = j + dx[k];

			if (valid(ny, nx) && !exists(taken, grid[ny][nx])) {
				taken += grid[ny][nx] + " ";
				path += linearize(ny, nx) + " ";
				ans = Math.max(dp(ny, nx, taken, path), ans);
			}
		}
		memo.put(path, 1 + ans);
		System.out.println("state: " + i + " " + j);
		System.out.println("returned " + (1 + ans));
		System.out.println("saved " + taken + " to " + (1 + ans));
		return 1 + ans;

	}

	public static void main(String[] args) throws IOException {
		// BufferedReader bf = new BufferedReader(new
		// InputStreamReader(System.in));
		BufferedReader bf = new BufferedReader(new FileReader("testing.txt"));
		int t = Integer.parseInt(bf.readLine());
		while (t-- > 0) {
			bf.readLine();
			n = Integer.parseInt(bf.readLine());
			grid = new int[n][n];
			int unique = 0;
			boolean[] seen = new boolean[1001];
			for (int i = 0; i < n; i++) {
				StringTokenizer st = new StringTokenizer(bf.readLine());
				for (int j = 0; j < n; j++) {
					grid[i][j] = Integer.parseInt(st.nextToken());
					if (!seen[grid[i][j]]) {
						seen[grid[i][j]] = true;
						unique++;
					}
				}
			}
			if (unique == n * n) {
				System.out.println(unique);
			} else {
				int ans = 0;

				for (int i = 0; i < n; i++) {
					for (int j = 0; j < n; j++) {
						memo = new TreeMap<>();
						ans = Math.max(ans, dp(0, 0, grid[i][j] + " ", linearize(i, j) + " "));
					}
				}

				System.out.println(ans);
			}
			if (t > 0) {
				System.out.println();
			}
		}

	}
}
