import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class GameofTwoStacks {
	static int[] A;
	static int[] B;
	static int INF = (int) -1e9;
	static int n, m;

	public static int dp(int idxA, int idxB, int rem) {
		if (rem < 0)
			return INF;

		int takeA = INF;
		int takeB = INF;

		if (idxA < n)
			takeA = 1 + dp(idxA + 1, idxB, rem - A[idxA]);
		if (idxB < n)
			takeB = 1 + dp(idxA, idxB + 1, rem - B[idxB]);

		return Math.max(takeA, takeB);
	}

	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		int g = Integer.parseInt(bf.readLine());
		while (g-- > 0) {
			StringTokenizer st = new StringTokenizer(bf.readLine());
			n = Integer.parseInt(st.nextToken());
			m = Integer.parseInt(st.nextToken());
			int x = Integer.parseInt(st.nextToken());
			A = new int[n];
			B = new int[m];
			st = new StringTokenizer(bf.readLine());
			for (int i = 0; st.hasMoreTokens(); i++)
				A[i] = Integer.parseInt(st.nextToken());
			st = new StringTokenizer(bf.readLine());
			for (int i = 0; st.hasMoreTokens(); i++)
				B[i] = Integer.parseInt(st.nextToken());

		}
	}
}
