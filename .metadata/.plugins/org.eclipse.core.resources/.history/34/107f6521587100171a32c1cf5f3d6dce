import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class RedGreenTowers {
	static int r, g, h;
	static int[][] dp = new int[200001][2];
	static int mod = (int) 1e9 + 7;

	static long findh() {
		long max = 0;
		long lo = 1;
		long hi = Math.max(r, g);

		while (lo <= hi) {
			long mid = lo + (hi - lo) / 2;
			if (mid * (mid + 1) / 2 <= r + g) {
				max = Math.max(max, mid);
				lo = mid + 1;
			} else
				hi = mid - 1;
		}

		return max;
	}

	public static void dp() {
		for (int i = 0; i <= r; i++)
			dp[i][0] = 1;

		int parity = 1;

		for (int lvl = 1; lvl <= h; lvl++) {
			int used = h * (h + 1) / 2 - (lvl * (lvl + 1) / 2);

			for (int remr = 0; remr <= r; remr++) {
				int usedr = r - remr;
				int usedg = used - usedr;
				int remg = g - usedg;

				if (remg < 0)
					continue;

				int val1 = 0;
				int val2 = 0;

				if (remr >= lvl)
					val1 = dp[remr - lvl][parity ^ 1] % mod;

				if (remg >= lvl)
					val2 = dp[remr][parity ^ 1] % mod;

				dp[remr][parity] = val1 + val2;
			}
		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(bf.readLine());
		r = Integer.parseInt(st.nextToken());
		g = Integer.parseInt(st.nextToken());
		h = (int) findh();

		System.out.println(h);

	}
}
