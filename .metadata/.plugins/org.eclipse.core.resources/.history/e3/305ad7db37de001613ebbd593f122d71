package adf.sample.module.algorithm;

import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.TreeMap;

import adf.agent.develop.DevelopData;
import adf.agent.info.AgentInfo;
import adf.agent.info.ScenarioInfo;
import adf.agent.info.WorldInfo;
import adf.agent.module.ModuleManager;
import adf.agent.precompute.PrecomputeData;
import adf.component.module.algorithm.PathPlanning;
import rescuecore2.misc.collections.LazyMap;
import rescuecore2.standard.entities.Area;
import rescuecore2.standard.entities.StandardEntity;
import rescuecore2.worldmodel.Entity;
import rescuecore2.worldmodel.EntityID;

public class SamplePathPlanning extends PathPlanning {

	static class Pair implements Comparable<Pair> {
		private int parent;
		private double f;

		public Pair(int parent, double f) {
			this.parent = parent;
			this.f = f;
		}

		@Override
		public int compareTo(Pair o) {
			if (f > o.f)
				return 1;
			else if (f < o.f)
				return -1;
			else
				return 0;

		}

	}

	private int counter = 0;
	private Map<EntityID, Set<EntityID>> graph;
	private TreeMap<Integer, EntityID> entityInt = new TreeMap<Integer, EntityID>();// we
																					// gave
																					// each
																					// entityid
																					// a
																					// unique
																					// int
																					// equivalent
	private TreeMap<Pair, Integer> pairInt = new TreeMap<Pair, Integer>();// this
																			// keeps
																			// track
																			// of
																			// the
																			// current
																			// entityid's
																			// parent
																			// and
																			// f
	private EntityID from;
	private Collection<EntityID> targets;
	private List<EntityID> result;

	public PathPlanning backtrack() {

		return this;
	}

	public SamplePathPlanning(AgentInfo ai, WorldInfo wi, ScenarioInfo si, ModuleManager moduleManager,
			DevelopData developData) {
		super(ai, wi, si, moduleManager, developData);
		this.init();
	}

	private void init() {
		Map<EntityID, Set<EntityID>> neighbours = new LazyMap<EntityID, Set<EntityID>>() {
			@Override
			public Set<EntityID> createValue() {
				return new HashSet<>();
			}
		};
		for (Entity next : this.worldInfo) {
			if (next instanceof Area) {
				Collection<EntityID> areaNeighbours = ((Area) next).getNeighbours();
				neighbours.get(next.getID()).addAll(areaNeighbours);
			}
		}
		this.graph = neighbours;
	}

	@Override
	public List<EntityID> getResult() {
		return this.result;
	}

	@Override
	public PathPlanning setFrom(EntityID id) {
		this.from = id;
		return this;
	}

	@Override
	public PathPlanning setDestination(Collection<EntityID> targets) {
		this.targets = targets;
		return this;
	}

	@Override
	public PathPlanning precompute(PrecomputeData precomputeData) {
		super.precompute(precomputeData);
		return this;
	}

	@Override
	public PathPlanning resume(PrecomputeData precomputeData) {
		super.resume(precomputeData);
		return this;
	}

	@Override
	public PathPlanning preparate() {
		super.preparate();
		return this;
	}

	@Override
    public PathPlanning calc() {
    	
//    	while the open list is not empty
//        find the node with the least f on the open list, call it "q"
//        pop q off the open list
//        generate q's 8 successors and set their parents to q
//        for each successor
//        	if successor is the goal, stop the search
//            successor.g = q.g + distance between successor and q
//            successor.h = distance from goal to successor
//            successor.f = successor.g + successor.h
//
//            if a node with the same position as successor is in the OPEN list \
//                which has a lower f than successor, skip this successor
//            if a node with the same position as successor is in the CLOSED list \ 
//                which has a lower f than successor, skip this successor
//            otherwise, add the node to the open list
//        end
//        push q on the closed list
//    end
    
    	EntityID targ;
    	
    	entityInt.put(counter++,this.from);
    	pairInt.put(new Pair(0,0),0);//from's id is zero
        for (EntityID neighbour : targets) {
    	 targ=neighbour;
        break;
        }

    	entityInt.put(counter++, targ);//our target's id is 1
    	
    	PriorityQueue<Pair> open=new PriorityQueue<Pair>();
    	open.add(new Pair(0,0));
    	while(true){
    		Pair cur=open.remove();
    		EntityID current=entityInt.get(cur.parent);
    		double g=cur.f;
    		StandardEntity curStand=this.worldInfo.getEntity(current);
    		int curID=cur.parent;
    		Collection<EntityID> neighbours = graph.get(current);
            if (neighbours.isEmpty()) {
                continue;
            }
            for (EntityID neighbour : neighbours) {
            	// StandardEntity child =this.worldInfo.getEntity(this.from); // KEDA bn7wal men entityId to standard entity
            	
            	
            	
            	
            	if (isGoal(neighbour, targets)) {
                    ancestors.put(neighbour, next);
                    next = neighbour;
                    found = true;
                    break;
                }

    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    		
    	}
    	
        List<EntityID> open = new LinkedList<>();
        Map<EntityID, EntityID> ancestors = new HashMap<>();
        open.add(this.from);
        EntityID next;
        boolean found = false;
        ancestors.put(this.from, this.from);
        do {
            next = open.remove(0);
            if (isGoal(next, targets)) {
                found = true;
                break;
            }
            Collection<EntityID> neighbours = graph.get(next);
            if (neighbours.isEmpty()) {
                continue;
            }
            for (EntityID neighbour : neighbours) {
                if (isGoal(neighbour, targets)) {
                    ancestors.put(neighbour, next);
                    next = neighbour;
                    found = true;
                    break;
                }
                else {
                    if (!ancestors.containsKey(neighbour)) {
                        open.add(neighbour);
                        ancestors.put(neighbour, next);
                    }
                }
            }
        } while (!found && !open.isEmpty());
        if (!found) {
            // No path
            this.result = null;
        }
        // Walk back from goal to this.from
        EntityID current = next;
        LinkedList<EntityID> path = new LinkedList<>();
        do {
            path.add(0, current);
            current = ancestors.get(current);
            if (current == null) {
                throw new RuntimeException("Found a node with no ancestor! Something is broken.");
            }
        } while (current != this.from);
        path.add(0, this.from);
        this.result = path;
        return this;
    }

	private boolean isGoal(EntityID e, Collection<EntityID> test) {
		return test.contains(e);
	}
}
