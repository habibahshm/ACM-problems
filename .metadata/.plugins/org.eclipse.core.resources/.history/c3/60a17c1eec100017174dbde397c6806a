import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class IntervalProduct{
	static class SegmentTree { // 1-based DS, OOP

		int N; // the number of elements in the array as a power of 2 (i.e.
				// after padding)
		int[] array, sTree, lazy;

		SegmentTree(int[] in) {
			array = in;
			N = in.length - 1;
			sTree = new int[N << 1]; // no. of nodes = 2*N - 1, we add one to
										// cross out index zero
			lazy = new int[N << 1];
			build(1, 1, N);
		}

		void build(int node, int b, int e) // O(n)
		{
			if (b == e)
				sTree[node] = array[b];
			else {
				build(node << 1, b, (b + e) / 2);
				build((node << 1) + 1, (b + e) / 2 + 1, e);
				sTree[node] = sTree[node << 1] * sTree[(node << 1) + 1];
			}
		}

		void update_point(int index, int val) // O(log n)
		{
			index += N - 1;
			sTree[index] = val;
			while (index > 1) {
				index >>= 1;
				sTree[index] = sTree[index << 1] * sTree[(index << 1) + 1];
			}
		}

		int query(int i, int j) {
			return query(1, 1, N, i, j);
		}

		int query(int node, int b, int e, int i, int j) // O(log n)
		{
			if (i > e || j < b)
				return 1;
			if (b >= i && e <= j)
				return sTree[node];
			int q1 = query(node << 1, b, (b + e) / 2, i, j);
			int q2 = query((node << 1) + 1, (b + e) / 2 + 1, e, i, j);
			return q1 * q2;

		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		PrintWriter out = new PrintWriter(System.out);
		String s = bf.readLine();
		while (s != null && s.length() > 0 && !s.isEmpty()) {
			StringTokenizer st = new StringTokenizer(s);
			int n = Integer.parseInt(st.nextToken());
			int k = Integer.parseInt(st.nextToken());
			int N = 1;
			while (N < n)
				N <<= 1;
			int in[] = new int[N + 1];
			st = new StringTokenizer(bf.readLine());
			for (int i = 1; i <= n; i++) {
				int tmp = Integer.parseInt(st.nextToken());
				if (tmp != 0)
					in[i] = tmp / Math.abs(tmp);
				else
					in[i] = tmp;
			}
			SegmentTree ST = new SegmentTree(in);
			for (int i = 0; i < k; i++) {
				st = new StringTokenizer(bf.readLine());
				char command = st.nextToken().charAt(0);
				int I = Integer.parseInt(st.nextToken());
				int V = Integer.parseInt(st.nextToken());
				if (command == 'C') {
					if (V != 0)
						V /= Math.abs(V);
					ST.update_point(I, V);

				} else {
					int tmp = ST.query(I, V);
					out.print(tmp > 0 ? "+" : tmp < 0 ? "-" : "0");
				}
			}
			s = bf.readLine();

			out.println();
		}
		out.flush();
		out.close();
	}

}