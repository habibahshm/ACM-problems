
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main {

	public static class SegmentTree {
		int N; // the number of elements in the array as a power of 2 (i.e.
				// after
		// padding)
		int[] array, sTree, lazy;

		SegmentTree(int[] in) {
			array = in;
			N = in.length-1;
			sTree = new int[N << 1]; // no. of nodes = 2*N - 1, we add one to
										// cross
										// out index zero
			lazy = new int[N << 1];
			build(1, 1, N);
		}

		void build(int node, int b, int e) // O(n)
		{
			if (b == e)
				sTree[node] = array[b];
			else {
				int mid = b + e >> 1;
				build(node << 1, b, mid);
				build(node << 1 | 1, mid + 1, e);
				sTree[node] = sTree[node << 1] + sTree[node << 1 | 1];
			}
		}

		void update_point(int index, int val) // O(log n)
		{
			index += N - 1;
			sTree[index] = val;
			while (index > 1) {
				index >>= 1;
				sTree[index] = sTree[index << 1] + sTree[index << 1 | 1];
			}
		}

		int query(int i, int j) {
			return query(1, 1, N, i, j);
		}

		int query(int node, int b, int e, int i, int j) // O(log n)
		{
			if (i > e || j < b)
				return 0;
			if (b >= i && e <= j)
				return sTree[node];
			int mid = b + e >> 1;
			int q1 = query(node << 1, b, mid, i, j);
			int q2 = query(node << 1 | 1, mid + 1, e, i, j);
			return q1 + q2;

		}
	}

	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		int n;
		for (int tc = 1; (n = Integer.parseInt(bf.readLine())) != 0; tc++) {
			if(tc >1)
				System.out.println();
			int N = 1;
			while (N < n)
				N <<= 1; // padding
			int[] p = new int[N+1];
			for (int i = 1; i <= n; i++)
				p[i] = Integer.parseInt(bf.readLine());
			SegmentTree s = new SegmentTree(p);
			String com;
			StringTokenizer st;
			System.out.println("Case " + tc+":");
			while (!(com = bf.readLine()).equals("END")) {
				st = new StringTokenizer(com);
				char c = st.nextToken().charAt(0);
				if (c == 'S') {
					int x = Integer.parseInt(st.nextToken());
					int r = Integer.parseInt(st.nextToken());
					s.update_point(x, r);
				} else {
					int l = Integer.parseInt(st.nextToken());
					int r = Integer.parseInt(st.nextToken());
					int ans = s.query(l, r);
					System.out.println(ans);
				}
			}
		}
	}
}