import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class WormWorld {
	static int n;
	static int[][] grid;
	// static int[][] memo;
	static int[] dy = { 0, 1, 0, -1 };
	static int[] dx = { 1, 0, -1, 0 };
	static PrintWriter out;

	public static boolean valid(int i, int j) {
		return !(i < 0 || i == n || j < 0 || j == n);
	}

	public static int dp(int i, int j, boolean[] exists) {

		// if (memo[i][j] != -1)
		// return memo[i][j];

		int ans = 0;

		for (int k = 0; k < 4; k++) {
			int ny = i + dy[k];
			int nx = j + dx[k];

			if (valid(ny, nx) && !exists[grid[ny][nx]]) {
				exists[grid[ny][nx]] = true;
				ans = Math.max(dp(ny, nx, exists), ans);
			}
		}

		out.println(i + " " + j);
		for (int k = 0; k < 22; k++)
			out.println(exists[k]);
		out.println();

		out.println("returned: " + (1 + ans));

		return 1 + ans;

	}

	public static void main(String[] args) throws IOException {
		// BufferedReader bf = new BufferedReader(new
		// InputStreamReader(System.in));
		BufferedReader bf = new BufferedReader(new FileReader("testing.txt"));
		out = new PrintWriter(new FileWriter("out.txt"));
		int t = Integer.parseInt(bf.readLine());
		while (t-- > 0) {
			bf.readLine();
			n = Integer.parseInt(bf.readLine());
			grid = new int[n][n];
			int unique = 0;
			boolean[] seen = new boolean[1001];
			for (int i = 0; i < n; i++) {
				StringTokenizer st = new StringTokenizer(bf.readLine());
				for (int j = 0; j < n; j++) {
					grid[i][j] = Integer.parseInt(st.nextToken());
					if (!seen[grid[i][j]]) {
						seen[grid[i][j]] = true;
						unique++;
					}
				}
			}
			if (unique == n * n) {
				System.out.println(unique);
			} else {
				int ans = 0;

				// for (int i = 0; i < n; i++) {
				// for (int j = 0; j < n; j++) {
				// memo = new int[n][n];
				// for (int k = 0; k < n; k++)
				// Arrays.fill(memo[k], -1);
				boolean[] taken = new boolean[1001];
				taken[grid[0][0]] = true;
				ans = Math.max(ans, dp(0, 0, taken));

				// }
				// }

				out.println(ans);
			}
			if (t > 0) {
				out.println();
			}
		}
	}
}
