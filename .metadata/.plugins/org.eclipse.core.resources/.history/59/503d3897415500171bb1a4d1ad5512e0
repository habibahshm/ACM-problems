import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class CollectingBeepers {
	static char[][] grid;
	static int beepers, maxx, maxy;
	static int INF = (int) 1e9;

	public static int minPath(int x, int y, int bn) {

		if (x == maxx || x < 0 || y < 0 || y == maxy)
			return INF;

		if (bn == beepers)
			return 0;

		if (grid[y][x] == 'x')
			bn++;
		
		int right = minPath(x + 1, y, bn);
		int left = minPath(x - 1, y, bn);
		int up = minPath(x, y - 1, bn);
		int down = minPath(x, y + 1, bn);

		return 1 + Math.min(right, Math.min(left, Math.min(up, down)));
	}

	public static void main(String[] args) throws IOException {
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		int t = Integer.parseInt(bf.readLine());
		while (t-- > 0) {
			StringTokenizer st = new StringTokenizer(bf.readLine());
			maxx = Integer.parseInt(st.nextToken());
			maxy = Integer.parseInt(st.nextToken());
			grid = new char[maxy][maxx];
			st = new StringTokenizer(bf.readLine());
			int sx = Integer.parseInt(st.nextToken());
			int sy = Integer.parseInt(st.nextToken());
			beepers = Integer.parseInt(bf.readLine());
			for (int i = 0; i < beepers; i++) {
				st = new StringTokenizer(bf.readLine());
				int bx = Integer.parseInt(st.nextToken());
				int by = Integer.parseInt(st.nextToken());
				grid[by][bx] = 'x';
			}

		}
	}
}
